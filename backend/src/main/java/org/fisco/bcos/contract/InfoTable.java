package contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class InfoTable extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506200002b62000095640100000000026401000000009004565b620000446200023c640100000000026401000000009004565b6200005d62000397640100000000026401000000009004565b62000076620004f2640100000000026401000000009004565b6200008f6200064d640100000000026401000000009004565b620007a8565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845260098152602001807f666f6f645f696e666f0000000000000000000000000000000000000000000000815250602001848103835260078152602001807f666f6f644e756d000000000000000000000000000000000000000000000000008152506020018481038252604f8152602001807f7375707049642c7472616e7349642c70726f6449642c72657461696c49642c6f81526020017f7574446174652c696e6772656469656e742c74656d702c6f726967696e2c666f81526020017f6f64496d672c666f6f64537461746500000000000000000000000000000000008152506060019350505050602060405180830381600087803b158015620001fb57600080fd5b505af115801562000210573d6000803e3d6000fd5b505050506040513d60208110156200022757600080fd5b81019080805190602001909291905050505050565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845260098152602001807f737570705f696e666f0000000000000000000000000000000000000000000000815250602001848103835260068152602001807f7375707049640000000000000000000000000000000000000000000000000000815250602001848103825260108152602001807f737570704e616d652c73757070496d67000000000000000000000000000000008152506020019350505050602060405180830381600087803b1580156200035657600080fd5b505af11580156200036b573d6000803e3d6000fd5b505050506040513d60208110156200038257600080fd5b81019080805190602001909291905050505050565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600a8152602001807f7472616e735f696e666f00000000000000000000000000000000000000000000815250602001848103835260078152602001807f7472616e73496400000000000000000000000000000000000000000000000000815250602001848103825260178152602001807f6472697665722c6361724e756d2c647269766572496d670000000000000000008152506020019350505050602060405180830381600087803b158015620004b157600080fd5b505af1158015620004c6573d6000803e3d6000fd5b505050506040513d6020811015620004dd57600080fd5b81019080805190602001909291905050505050565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600b8152602001807f72657461696c5f696e666f000000000000000000000000000000000000000000815250602001848103835260088152602001807f72657461696c4964000000000000000000000000000000000000000000000000815250602001848103825260148152602001807f72657461696c4e616d652c72657461696c496d670000000000000000000000008152506020019350505050602060405180830381600087803b1580156200060c57600080fd5b505af115801562000621573d6000803e3d6000fd5b505050506040513d60208110156200063857600080fd5b81019080805190602001909291905050505050565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600f8152602001807f746872656550617274795f696e666f00000000000000000000000000000000008152506020018481038352600c8152602001807f74687265655061727479496400000000000000000000000000000000000000008152506020018481038252601c8152602001807f746872656550617274794e616d652c74687265655061727479496d67000000008152506020019350505050602060405180830381600087803b1580156200076757600080fd5b505af11580156200077c573d6000803e3d6000fd5b505050506040513d60208110156200079357600080fd5b81019080805190602001909291905050505050565b61574680620007b86000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d93efbb146100ca578063257276e6146100f55780633ace9762146101fe5780633b97730314610292578063b933001f14610335578063b9dcc2e8146103c9578063cf0e7148146104d2578063d541561a146106ad578063d9d3401414610741578063dc0eb5121461084a578063df715b9314610999578063ed3d8df314610a16578063f5be4a0514610ad9575b600080fd5b3480156100d657600080fd5b506100df610be2565b6040518082815260200191505060405180910390f35b34801561010157600080fd5b506101e8600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610c14565b6040518082815260200191505060405180910390f35b34801561020a57600080fd5b50610265600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506111bd565b60405180836000191660001916815260200182600019166000191681526020019250505060405180910390f35b34801561029e57600080fd5b506102f9600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061174b565b60405180846000191660001916815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390f35b34801561034157600080fd5b5061039c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611dba565b60405180836000191660001916815260200182600019166000191681526020019250505060405180910390f35b3480156103d557600080fd5b506104bc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612348565b6040518082815260200191505060405180910390f35b3480156104de57600080fd5b50610697600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506128f1565b6040518082815260200191505060405180910390f35b3480156106b957600080fd5b50610714600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506131d5565b60405180836000191660001916815260200182600019166000191681526020019250505060405180910390f35b34801561074d57600080fd5b50610834600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613763565b6040518082815260200191505060405180910390f35b34801561085657600080fd5b50610983600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613d0c565b6040518082815260200191505060405180910390f35b3480156109a557600080fd5b50610a00600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506143db565b6040518082815260200191505060405180910390f35b348015610a2257600080fd5b50610ac3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614701565b6040518082815260200191505060405180910390f35b348015610ae557600080fd5b50610bcc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614c25565b6040518082815260200191505060405180910390f35b60008060644260405180828152602001915050604051809103902060019004811515610c0a57fe5b0690508091505090565b600080600080610c2261526f565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c8857600080fd5b505af1158015610c9c573d6000803e3d6000fd5b505050506040513d6020811015610cb257600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f7375707049640000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610d85578082015181840152602081019050610d6a565b50505050905090810190601f168015610db25780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f737570704e616d65000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610eaa578082015181840152602081019050610e8f565b50505050905090810190601f168015610ed75780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610ef757600080fd5b505af1158015610f0b573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f73757070496d6700000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610fcf578082015181840152602081019050610fb4565b50505050905090810190601f168015610ffc5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561101c57600080fd5b505af1158015611030573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3688846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156110ef5780820151818401526020810190506110d4565b50505050905090810190601f16801561111c5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561113c57600080fd5b505af1158015611150573d6000803e3d6000fd5b505050506040513d602081101561116657600080fd5b810190808051906020019092919050505090507f7b9753c09e7a4cb878c7452d5b159d9989d3ffc3942b3433329a56b635a17707816040518082815260200191505060405180910390a18093505050509392505050565b6000806000806000806111ce61535e565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b505050506040513d602081101561125e57600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f7468726565506172747949640000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611331578082015181840152602081019050611316565b50505050905090810190601f16801561135e5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561137e57600080fd5b505af1158015611392573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e8434e3988856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611451578082015181840152602081019050611436565b50505050905090810190601f16801561147e5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561149e57600080fd5b505af11580156114b2573d6000803e3d6000fd5b505050506040513d60208110156114c857600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561154b57600080fd5b505af115801561155f573d6000803e3d6000fd5b505050506040513d602081101561157557600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600e8152602001807f746872656550617274794e616d65000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561162857600080fd5b505af115801561163c573d6000803e3d6000fd5b505050506040513d602081101561165257600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f74687265655061727479496d6700000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b505050506040513d602081101561172d57600080fd5b81019080805190602001909291905050509550955050505050915091565b600080600080600080600061175e61544d565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117c457600080fd5b505af11580156117d8573d6000803e3d6000fd5b505050506040513d60208110156117ee57600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f7472616e73496400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156118c15780820151818401526020810190506118a6565b50505050905090810190601f1680156118ee5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561190e57600080fd5b505af1158015611922573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e8434e3989856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156119e15780820151818401526020810190506119c6565b50505050905090810190601f168015611a0e5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050506040513d6020811015611a5857600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611adb57600080fd5b505af1158015611aef573d6000803e3d6000fd5b505050506040513d6020811015611b0557600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f6472697665720000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611bb857600080fd5b505af1158015611bcc573d6000803e3d6000fd5b505050506040513d6020811015611be257600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f6361724e756d0000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611c9357600080fd5b505af1158015611ca7573d6000803e3d6000fd5b505050506040513d6020811015611cbd57600080fd5b81019080805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f647269766572496d670000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611d6e57600080fd5b505af1158015611d82573d6000803e3d6000fd5b505050506040513d6020811015611d9857600080fd5b8101908080519060200190929190505050965096509650505050509193909250565b600080600080600080611dcb61553c565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e3157600080fd5b505af1158015611e45573d6000803e3d6000fd5b505050506040513d6020811015611e5b57600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f72657461696c4964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611f2e578082015181840152602081019050611f13565b50505050905090810190601f168015611f5b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611f7b57600080fd5b505af1158015611f8f573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e8434e3988856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561204e578082015181840152602081019050612033565b50505050905090810190601f16801561207b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561209b57600080fd5b505af11580156120af573d6000803e3d6000fd5b505050506040513d60208110156120c557600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561214857600080fd5b505af115801561215c573d6000803e3d6000fd5b505050506040513d602081101561217257600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f72657461696c4e616d6500000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561222557600080fd5b505af1158015612239573d6000803e3d6000fd5b505050506040513d602081101561224f57600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f72657461696c496d670000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561230057600080fd5b505af1158015612314573d6000803e3d6000fd5b505050506040513d602081101561232a57600080fd5b81019080805190602001909291905050509550955050505050915091565b60008060008061235661535e565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156123bc57600080fd5b505af11580156123d0573d6000803e3d6000fd5b505050506040513d60208110156123e657600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f7468726565506172747949640000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156124b957808201518184015260208101905061249e565b50505050905090810190601f1680156124e65780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561250657600080fd5b505af115801561251a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600e8152602001807f746872656550617274794e616d65000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156125de5780820151818401526020810190506125c3565b50505050905090810190601f16801561260b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561262b57600080fd5b505af115801561263f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600d8152602001807f74687265655061727479496d6700000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156127035780820151818401526020810190506126e8565b50505050905090810190601f1680156127305780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561275057600080fd5b505af1158015612764573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3688846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612823578082015181840152602081019050612808565b50505050905090810190601f1680156128505780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561287057600080fd5b505af1158015612884573d6000803e3d6000fd5b505050506040513d602081101561289a57600080fd5b810190808051906020019092919050505090507f64c672e96d08aafbc54c254d477f24466b74665390dffa681008743b88c6eb3e816040518082815260200191505060405180910390a18093505050509392505050565b6000806000806128ff61562b565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561296557600080fd5b505af1158015612979573d6000803e3d6000fd5b505050506040513d602081101561298f57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f666f6f644e756d00000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612a62578082015181840152602081019050612a47565b50505050905090810190601f168015612a8f5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612aaf57600080fd5b505af1158015612ac3573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f7375707049640000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612b87578082015181840152602081019050612b6c565b50505050905090810190601f168015612bb45780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612bd457600080fd5b505af1158015612be8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6f75744461746500000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612cac578082015181840152602081019050612c91565b50505050905090810190601f168015612cd95780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612cf957600080fd5b505af1158015612d0d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f696e6772656469656e7400000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612dd1578082015181840152602081019050612db6565b50505050905090810190601f168015612dfe5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f6f726967696e0000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612ef6578082015181840152602081019050612edb565b50505050905090810190601f168015612f235780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612f4357600080fd5b505af1158015612f57573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f666f6f64496d6700000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561301b578082015181840152602081019050613000565b50505050905090810190601f1680156130485780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561306857600080fd5b505af115801561307c573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561313b578082015181840152602081019050613120565b50505050905090810190601f1680156131685780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561318857600080fd5b505af115801561319c573d6000803e3d6000fd5b505050506040513d60208110156131b257600080fd5b810190808051906020019092919050505090508093505050509695505050505050565b6000806000806000806131e661526f565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561324c57600080fd5b505af1158015613260573d6000803e3d6000fd5b505050506040513d602081101561327657600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f7375707049640000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561334957808201518184015260208101905061332e565b50505050905090810190601f1680156133765780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561339657600080fd5b505af11580156133aa573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e8434e3988856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561346957808201518184015260208101905061344e565b50505050905090810190601f1680156134965780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156134b657600080fd5b505af11580156134ca573d6000803e3d6000fd5b505050506040513d60208110156134e057600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561356357600080fd5b505af1158015613577573d6000803e3d6000fd5b505050506040513d602081101561358d57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f737570704e616d65000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561364057600080fd5b505af1158015613654573d6000803e3d6000fd5b505050506040513d602081101561366a57600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260078152602001807f73757070496d6700000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561371b57600080fd5b505af115801561372f573d6000803e3d6000fd5b505050506040513d602081101561374557600080fd5b81019080805190602001909291905050509550955050505050915091565b60008060008061377161553c565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156137d757600080fd5b505af11580156137eb573d6000803e3d6000fd5b505050506040513d602081101561380157600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f72657461696c4964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156138d45780820151818401526020810190506138b9565b50505050905090810190601f1680156139015780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561392157600080fd5b505af1158015613935573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f72657461696c4e616d6500000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156139f95780820151818401526020810190506139de565b50505050905090810190601f168015613a265780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613a4657600080fd5b505af1158015613a5a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260098152602001807f72657461696c496d670000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613b1e578082015181840152602081019050613b03565b50505050905090810190601f168015613b4b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613b6b57600080fd5b505af1158015613b7f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3688846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015613c3e578082015181840152602081019050613c23565b50505050905090810190601f168015613c6b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613c8b57600080fd5b505af1158015613c9f573d6000803e3d6000fd5b505050506040513d6020811015613cb557600080fd5b810190808051906020019092919050505090507f455e9501f65e5b3f397ad0a039ec81cc22da22b8708e1b238fede80be11e65db816040518082815260200191505060405180910390a18093505050509392505050565b600080600080613d1a61544d565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613d8057600080fd5b505af1158015613d94573d6000803e3d6000fd5b505050506040513d6020811015613daa57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f7472616e73496400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613e7d578082015181840152602081019050613e62565b50505050905090810190601f168015613eaa5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613eca57600080fd5b505af1158015613ede573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f6472697665720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613fa2578082015181840152602081019050613f87565b50505050905090810190601f168015613fcf5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613fef57600080fd5b505af1158015614003573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f6361724e756d0000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156140c75780820151818401526020810190506140ac565b50505050905090810190601f1680156140f45780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561411457600080fd5b505af1158015614128573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260098152602001807f647269766572496d670000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156141ec5780820151818401526020810190506141d1565b50505050905090810190601f1680156142195780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561423957600080fd5b505af115801561424d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3689846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561430c5780820151818401526020810190506142f1565b50505050905090810190601f1680156143395780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561435957600080fd5b505af115801561436d573d6000803e3d6000fd5b505050506040513d602081101561438357600080fd5b810190808051906020019092919050505090507f2703b3e5f4323fa0eb5061010a8a656e60c86ce4645e2b0a226cc1ef05e30712816040518082815260200191505060405180910390a1809350505050949350505050565b6000806000806143e961562b565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561444f57600080fd5b505af1158015614463573d6000803e3d6000fd5b505050506040513d602081101561447957600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f666f6f644e756d00000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561454c578082015181840152602081019050614531565b50505050905090810190601f1680156145795780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561459957600080fd5b505af11580156145ad573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166328bb211786846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561466c578082015181840152602081019050614651565b50505050905090810190601f1680156146995780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156146b957600080fd5b505af11580156146cd573d6000803e3d6000fd5b505050506040513d60208110156146e357600080fd5b81019080805190602001909291905050509050809350505050919050565b600080600080600061471161562b565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561477757600080fd5b505af115801561478b573d6000803e3d6000fd5b505050506040513d60208110156147a157600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f72657461696c4964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015614874578082015181840152602081019050614859565b50505050905090810190601f1680156148a15780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156148c157600080fd5b505af11580156148d5573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561493d57600080fd5b505af1158015614951573d6000803e3d6000fd5b505050506040513d602081101561496757600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f666f6f644e756d00000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015614a3a578082015181840152602081019050614a1f565b50505050905090810190601f168015614a675780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015614a8757600080fd5b505af1158015614a9b573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18885856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015614b8d578082015181840152602081019050614b72565b50505050905090810190601f168015614bba5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015614bdb57600080fd5b505af1158015614bef573d6000803e3d6000fd5b505050506040513d6020811015614c0557600080fd5b810190808051906020019092919050505090508094505050505092915050565b6000806000806000614c3561562b565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614c9b57600080fd5b505af1158015614caf573d6000803e3d6000fd5b505050506040513d6020811015614cc557600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f7472616e73496400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015614d98578082015181840152602081019050614d7d565b50505050905090810190601f168015614dc55780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015614de557600080fd5b505af1158015614df9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f74656d7000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015614ebd578082015181840152602081019050614ea2565b50505050905090810190601f168015614eea5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015614f0a57600080fd5b505af1158015614f1e573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614f8657600080fd5b505af1158015614f9a573d6000803e3d6000fd5b505050506040513d6020811015614fb057600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f666f6f644e756d00000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015615083578082015181840152602081019050615068565b50505050905090810190601f1680156150b05780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156150d057600080fd5b505af11580156150e4573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18985856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b838110156151d65780820151818401526020810190506151bb565b50505050905090810190601f1680156152035780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561522457600080fd5b505af1158015615238573d6000803e3d6000fd5b505050506040513d602081101561524e57600080fd5b81019080805190602001909291905050509050809450505050509392505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f737570705f696e666f0000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561531957600080fd5b505af115801561532d573d6000803e3d6000fd5b505050506040513d602081101561534357600080fd5b81019080805190602001909291905050509050809250505090565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600f8152602001807f746872656550617274795f696e666f0000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561540857600080fd5b505af115801561541c573d6000803e3d6000fd5b505050506040513d602081101561543257600080fd5b81019080805190602001909291905050509050809250505090565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f7472616e735f696e666f00000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156154f757600080fd5b505af115801561550b573d6000803e3d6000fd5b505050506040513d602081101561552157600080fd5b81019080805190602001909291905050509050809250505090565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f72657461696c5f696e666f000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156155e657600080fd5b505af11580156155fa573d6000803e3d6000fd5b505050506040513d602081101561561057600080fd5b81019080805190602001909291905050509050809250505090565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f666f6f645f696e666f0000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156156d557600080fd5b505af11580156156e9573d6000803e3d6000fd5b505050506040513d60208110156156ff57600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a72305820f2715862376bfeac0d0dffb6c96b0ee4319000c3fed44c63eaa08c67269590a90029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[],\"name\":\"pointThreeParty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"suppId\",\"type\":\"string\"},{\"name\":\"suppName\",\"type\":\"string\"},{\"name\":\"suppImg\",\"type\":\"string\"}],\"name\":\"suppInsert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"threePartyId\",\"type\":\"string\"}],\"name\":\"threePartySelect\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transId\",\"type\":\"string\"}],\"name\":\"transSelect\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"retailId\",\"type\":\"string\"}],\"name\":\"retailSelect\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threePartyId\",\"type\":\"string\"},{\"name\":\"threePartyName\",\"type\":\"string\"},{\"name\":\"threePartyImg\",\"type\":\"string\"}],\"name\":\"threePartyInsert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foodNum\",\"type\":\"string\"},{\"name\":\"suppId\",\"type\":\"string\"},{\"name\":\"outDate\",\"type\":\"string\"},{\"name\":\"ingredient\",\"type\":\"string\"},{\"name\":\"origin\",\"type\":\"string\"},{\"name\":\"foodImg\",\"type\":\"string\"}],\"name\":\"suppAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"suppId\",\"type\":\"string\"}],\"name\":\"suppSelect\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"retailId\",\"type\":\"string\"},{\"name\":\"retailName\",\"type\":\"string\"},{\"name\":\"retailImg\",\"type\":\"string\"}],\"name\":\"retailInsert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transId\",\"type\":\"string\"},{\"name\":\"driver\",\"type\":\"string\"},{\"name\":\"carNum\",\"type\":\"string\"},{\"name\":\"driverImg\",\"type\":\"string\"}],\"name\":\"transInsert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foodNum\",\"type\":\"string\"}],\"name\":\"foodDel\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foodNum\",\"type\":\"string\"},{\"name\":\"retailId\",\"type\":\"string\"}],\"name\":\"retailAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foodNum\",\"type\":\"string\"},{\"name\":\"transId\",\"type\":\"string\"},{\"name\":\"temp\",\"type\":\"string\"}],\"name\":\"transAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"food\",\"type\":\"int256\"}],\"name\":\"foodInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supp\",\"type\":\"int256\"}],\"name\":\"suppInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trans\",\"type\":\"int256\"}],\"name\":\"transInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"retail\",\"type\":\"int256\"}],\"name\":\"retailInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"threeParty\",\"type\":\"int256\"}],\"name\":\"threePartyInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"foodNum\",\"type\":\"int256\"}],\"name\":\"infoDeleteEvent\",\"type\":\"event\"}]";

    public static final String FUNC_POINTTHREEPARTY = "pointThreeParty";

    public static final String FUNC_SUPPINSERT = "suppInsert";

    public static final String FUNC_THREEPARTYSELECT = "threePartySelect";

    public static final String FUNC_TRANSSELECT = "transSelect";

    public static final String FUNC_RETAILSELECT = "retailSelect";

    public static final String FUNC_THREEPARTYINSERT = "threePartyInsert";

    public static final String FUNC_SUPPADD = "suppAdd";

    public static final String FUNC_SUPPSELECT = "suppSelect";

    public static final String FUNC_RETAILINSERT = "retailInsert";

    public static final String FUNC_TRANSINSERT = "transInsert";

    public static final String FUNC_FOODDEL = "foodDel";

    public static final String FUNC_RETAILADD = "retailAdd";

    public static final String FUNC_TRANSADD = "transAdd";

    public static final Event FOODINSERTEVENT_EVENT = new Event("foodInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event SUPPINSERTEVENT_EVENT = new Event("suppInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSINSERTEVENT_EVENT = new Event("transInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event RETAILINSERTEVENT_EVENT = new Event("retailInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event THREEPARTYINSERTEVENT_EVENT = new Event("threePartyInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INFODELETEEVENT_EVENT = new Event("infoDeleteEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected InfoTable(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected InfoTable(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected InfoTable(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected InfoTable(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> pointThreeParty() {
        final Function function = new Function(
                FUNC_POINTTHREEPARTY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void pointThreeParty(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_POINTTHREEPARTY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String pointThreePartySeq() {
        final Function function = new Function(
                FUNC_POINTTHREEPARTY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> suppInsert(String suppId, String suppName, String suppImg) {
        final Function function = new Function(
                FUNC_SUPPINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void suppInsert(String suppId, String suppName, String suppImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SUPPINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String suppInsertSeq(String suppId, String suppName, String suppImg) {
        final Function function = new Function(
                FUNC_SUPPINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<byte[], byte[]>> threePartySelect(String threePartyId) {
        final Function function = new Function(FUNC_THREEPARTYSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<byte[], byte[]>>(
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<byte[], byte[], byte[]>> transSelect(String transId) {
        final Function function = new Function(FUNC_TRANSSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple3<byte[], byte[], byte[]>>(
                new Callable<Tuple3<byte[], byte[], byte[]>>() {
                    @Override
                    public Tuple3<byte[], byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<byte[], byte[]>> retailSelect(String retailId) {
        final Function function = new Function(FUNC_RETAILSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<byte[], byte[]>>(
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> threePartyInsert(String threePartyId, String threePartyName, String threePartyImg) {
        final Function function = new Function(
                FUNC_THREEPARTYINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void threePartyInsert(String threePartyId, String threePartyName, String threePartyImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_THREEPARTYINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String threePartyInsertSeq(String threePartyId, String threePartyName, String threePartyImg) {
        final Function function = new Function(
                FUNC_THREEPARTYINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> suppAdd(String foodNum, String suppId, String outDate, String ingredient, String origin, String foodImg) {
        final Function function = new Function(
                FUNC_SUPPADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(outDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(ingredient), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(origin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void suppAdd(String foodNum, String suppId, String outDate, String ingredient, String origin, String foodImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SUPPADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(outDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(ingredient), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(origin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String suppAddSeq(String foodNum, String suppId, String outDate, String ingredient, String origin, String foodImg) {
        final Function function = new Function(
                FUNC_SUPPADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(outDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(ingredient), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(origin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> suppSelect(String suppId) {
        final Function function = new Function(
                FUNC_SUPPSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void suppSelect(String suppId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SUPPSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String suppSelectSeq(String suppId) {
        final Function function = new Function(
                FUNC_SUPPSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> retailInsert(String retailId, String retailName, String retailImg) {
        final Function function = new Function(
                FUNC_RETAILINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void retailInsert(String retailId, String retailName, String retailImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RETAILINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String retailInsertSeq(String retailId, String retailName, String retailImg) {
        final Function function = new Function(
                FUNC_RETAILINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transInsert(String transId, String driver, String carNum, String driverImg) {
        final Function function = new Function(
                FUNC_TRANSINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driver), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(carNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driverImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transInsert(String transId, String driver, String carNum, String driverImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driver), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(carNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driverImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transInsertSeq(String transId, String driver, String carNum, String driverImg) {
        final Function function = new Function(
                FUNC_TRANSINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driver), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(carNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driverImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> foodDel(String foodNum) {
        final Function function = new Function(
                FUNC_FOODDEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void foodDel(String foodNum, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_FOODDEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String foodDelSeq(String foodNum) {
        final Function function = new Function(
                FUNC_FOODDEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> retailAdd(String foodNum, String retailId) {
        final Function function = new Function(
                FUNC_RETAILADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void retailAdd(String foodNum, String retailId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RETAILADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String retailAddSeq(String foodNum, String retailId) {
        final Function function = new Function(
                FUNC_RETAILADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transAdd(String foodNum, String transId, String temp) {
        final Function function = new Function(
                FUNC_TRANSADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(temp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transAdd(String foodNum, String transId, String temp, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(temp)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transAddSeq(String foodNum, String transId, String temp) {
        final Function function = new Function(
                FUNC_TRANSADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(temp)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public List<FoodInsertEventEventResponse> getFoodInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FOODINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<FoodInsertEventEventResponse> responses = new ArrayList<FoodInsertEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FoodInsertEventEventResponse typedResponse = new FoodInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.food = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FoodInsertEventEventResponse> foodInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, FoodInsertEventEventResponse>() {
            @Override
            public FoodInsertEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FOODINSERTEVENT_EVENT, log);
                FoodInsertEventEventResponse typedResponse = new FoodInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.food = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FoodInsertEventEventResponse> foodInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FOODINSERTEVENT_EVENT));
        return foodInsertEventEventFlowable(filter);
    }

    public List<SuppInsertEventEventResponse> getSuppInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPPINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<SuppInsertEventEventResponse> responses = new ArrayList<SuppInsertEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuppInsertEventEventResponse typedResponse = new SuppInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.supp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuppInsertEventEventResponse> suppInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, SuppInsertEventEventResponse>() {
            @Override
            public SuppInsertEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPPINSERTEVENT_EVENT, log);
                SuppInsertEventEventResponse typedResponse = new SuppInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.supp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuppInsertEventEventResponse> suppInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPPINSERTEVENT_EVENT));
        return suppInsertEventEventFlowable(filter);
    }

    public List<TransInsertEventEventResponse> getTransInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<TransInsertEventEventResponse> responses = new ArrayList<TransInsertEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransInsertEventEventResponse typedResponse = new TransInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.trans = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransInsertEventEventResponse> transInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, TransInsertEventEventResponse>() {
            @Override
            public TransInsertEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSINSERTEVENT_EVENT, log);
                TransInsertEventEventResponse typedResponse = new TransInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.trans = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransInsertEventEventResponse> transInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSINSERTEVENT_EVENT));
        return transInsertEventEventFlowable(filter);
    }

    public List<RetailInsertEventEventResponse> getRetailInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETAILINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<RetailInsertEventEventResponse> responses = new ArrayList<RetailInsertEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RetailInsertEventEventResponse typedResponse = new RetailInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.retail = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RetailInsertEventEventResponse> retailInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, RetailInsertEventEventResponse>() {
            @Override
            public RetailInsertEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETAILINSERTEVENT_EVENT, log);
                RetailInsertEventEventResponse typedResponse = new RetailInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.retail = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RetailInsertEventEventResponse> retailInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETAILINSERTEVENT_EVENT));
        return retailInsertEventEventFlowable(filter);
    }

    public List<ThreePartyInsertEventEventResponse> getThreePartyInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(THREEPARTYINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<ThreePartyInsertEventEventResponse> responses = new ArrayList<ThreePartyInsertEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ThreePartyInsertEventEventResponse typedResponse = new ThreePartyInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.threeParty = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ThreePartyInsertEventEventResponse> threePartyInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, ThreePartyInsertEventEventResponse>() {
            @Override
            public ThreePartyInsertEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(THREEPARTYINSERTEVENT_EVENT, log);
                ThreePartyInsertEventEventResponse typedResponse = new ThreePartyInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.threeParty = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ThreePartyInsertEventEventResponse> threePartyInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(THREEPARTYINSERTEVENT_EVENT));
        return threePartyInsertEventEventFlowable(filter);
    }

    public List<InfoDeleteEventEventResponse> getInfoDeleteEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INFODELETEEVENT_EVENT, transactionReceipt);
        ArrayList<InfoDeleteEventEventResponse> responses = new ArrayList<InfoDeleteEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InfoDeleteEventEventResponse typedResponse = new InfoDeleteEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.foodNum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InfoDeleteEventEventResponse> infoDeleteEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, InfoDeleteEventEventResponse>() {
            @Override
            public InfoDeleteEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INFODELETEEVENT_EVENT, log);
                InfoDeleteEventEventResponse typedResponse = new InfoDeleteEventEventResponse();
                typedResponse.log = log;
                typedResponse.foodNum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InfoDeleteEventEventResponse> infoDeleteEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INFODELETEEVENT_EVENT));
        return infoDeleteEventEventFlowable(filter);
    }

    @Deprecated
    public static InfoTable load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new InfoTable(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static InfoTable load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new InfoTable(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static InfoTable load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new InfoTable(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static InfoTable load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new InfoTable(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<InfoTable> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InfoTable.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<InfoTable> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InfoTable.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InfoTable> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InfoTable.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InfoTable> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InfoTable.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class FoodInsertEventEventResponse {
        public Log log;

        public BigInteger food;
    }

    public static class SuppInsertEventEventResponse {
        public Log log;

        public BigInteger supp;
    }

    public static class TransInsertEventEventResponse {
        public Log log;

        public BigInteger trans;
    }

    public static class RetailInsertEventEventResponse {
        public Log log;

        public BigInteger retail;
    }

    public static class ThreePartyInsertEventEventResponse {
        public Log log;

        public BigInteger threeParty;
    }

    public static class InfoDeleteEventEventResponse {
        public Log log;

        public BigInteger foodNum;
    }
}
