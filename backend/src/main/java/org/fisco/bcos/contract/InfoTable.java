package org.fisco.bcos.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class InfoTable extends Contract {
    public static final String BINARY = "";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[],\"name\":\"pointThreeParty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"suppId\",\"type\":\"string\"},{\"name\":\"suppName\",\"type\":\"string\"},{\"name\":\"suppImg\",\"type\":\"string\"}],\"name\":\"suppInsert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"threePartyId\",\"type\":\"string\"}],\"name\":\"threePartySelect\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transId\",\"type\":\"string\"}],\"name\":\"transSelect\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transId\",\"type\":\"string\"},{\"name\":\"carNum\",\"type\":\"string\"},{\"name\":\"driverImg\",\"type\":\"string\"}],\"name\":\"transInsert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"retailId\",\"type\":\"string\"}],\"name\":\"retailSelect\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threePartyId\",\"type\":\"string\"},{\"name\":\"threePartyName\",\"type\":\"string\"},{\"name\":\"threePartyImg\",\"type\":\"string\"}],\"name\":\"threePartyInsert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foodNum\",\"type\":\"string\"},{\"name\":\"suppId\",\"type\":\"string\"},{\"name\":\"outDate\",\"type\":\"string\"},{\"name\":\"ingredient\",\"type\":\"string\"},{\"name\":\"origin\",\"type\":\"string\"},{\"name\":\"foodImg\",\"type\":\"string\"}],\"name\":\"suppAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"suppId\",\"type\":\"string\"}],\"name\":\"suppSelect\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"retailId\",\"type\":\"string\"},{\"name\":\"retailName\",\"type\":\"string\"},{\"name\":\"retailImg\",\"type\":\"string\"}],\"name\":\"retailInsert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foodNum\",\"type\":\"string\"}],\"name\":\"foodDel\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foodNum\",\"type\":\"string\"},{\"name\":\"retailId\",\"type\":\"string\"}],\"name\":\"retailAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foodNum\",\"type\":\"string\"},{\"name\":\"transId\",\"type\":\"string\"},{\"name\":\"temp\",\"type\":\"string\"}],\"name\":\"transAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"food\",\"type\":\"int256\"}],\"name\":\"foodInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supp\",\"type\":\"int256\"}],\"name\":\"suppInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trans\",\"type\":\"int256\"}],\"name\":\"transInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"retail\",\"type\":\"int256\"}],\"name\":\"retailInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"threeParty\",\"type\":\"int256\"}],\"name\":\"threePartyInsertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"foodNum\",\"type\":\"int256\"}],\"name\":\"infoDeleteEvent\",\"type\":\"event\"}]";

    public static final String FUNC_POINTTHREEPARTY = "pointThreeParty";

    public static final String FUNC_SUPPINSERT = "suppInsert";

    public static final String FUNC_THREEPARTYSELECT = "threePartySelect";

    public static final String FUNC_TRANSSELECT = "transSelect";

    public static final String FUNC_TRANSINSERT = "transInsert";

    public static final String FUNC_RETAILSELECT = "retailSelect";

    public static final String FUNC_THREEPARTYINSERT = "threePartyInsert";

    public static final String FUNC_SUPPADD = "suppAdd";

    public static final String FUNC_SUPPSELECT = "suppSelect";

    public static final String FUNC_RETAILINSERT = "retailInsert";

    public static final String FUNC_FOODDEL = "foodDel";

    public static final String FUNC_RETAILADD = "retailAdd";

    public static final String FUNC_TRANSADD = "transAdd";

    public static final Event FOODINSERTEVENT_EVENT = new Event("foodInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event SUPPINSERTEVENT_EVENT = new Event("suppInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSINSERTEVENT_EVENT = new Event("transInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event RETAILINSERTEVENT_EVENT = new Event("retailInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event THREEPARTYINSERTEVENT_EVENT = new Event("threePartyInsertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INFODELETEEVENT_EVENT = new Event("infoDeleteEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected InfoTable(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected InfoTable(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected InfoTable(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected InfoTable(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> pointThreeParty() {
        final Function function = new Function(
                FUNC_POINTTHREEPARTY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void pointThreeParty(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_POINTTHREEPARTY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String pointThreePartySeq() {
        final Function function = new Function(
                FUNC_POINTTHREEPARTY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> suppInsert(String suppId, String suppName, String suppImg) {
        final Function function = new Function(
                FUNC_SUPPINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void suppInsert(String suppId, String suppName, String suppImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SUPPINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String suppInsertSeq(String suppId, String suppName, String suppImg) {
        final Function function = new Function(
                FUNC_SUPPINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<byte[], byte[]>> threePartySelect(String threePartyId) {
        final Function function = new Function(FUNC_THREEPARTYSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<byte[], byte[]>>(
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<byte[], byte[]>> transSelect(String transId) {
        final Function function = new Function(FUNC_TRANSSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<byte[], byte[]>>(
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> transInsert(String transId, String carNum, String driverImg) {
        final Function function = new Function(
                FUNC_TRANSINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(carNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driverImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transInsert(String transId, String carNum, String driverImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(carNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driverImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transInsertSeq(String transId, String carNum, String driverImg) {
        final Function function = new Function(
                FUNC_TRANSINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(carNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(driverImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<byte[], byte[]>> retailSelect(String retailId) {
        final Function function = new Function(FUNC_RETAILSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<byte[], byte[]>>(
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> threePartyInsert(String threePartyId, String threePartyName, String threePartyImg) {
        final Function function = new Function(
                FUNC_THREEPARTYINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void threePartyInsert(String threePartyId, String threePartyName, String threePartyImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_THREEPARTYINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String threePartyInsertSeq(String threePartyId, String threePartyName, String threePartyImg) {
        final Function function = new Function(
                FUNC_THREEPARTYINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(threePartyImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> suppAdd(String foodNum, String suppId, String outDate, String ingredient, String origin, String foodImg) {
        final Function function = new Function(
                FUNC_SUPPADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(outDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(ingredient), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(origin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void suppAdd(String foodNum, String suppId, String outDate, String ingredient, String origin, String foodImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SUPPADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(outDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(ingredient), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(origin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String suppAddSeq(String foodNum, String suppId, String outDate, String ingredient, String origin, String foodImg) {
        final Function function = new Function(
                FUNC_SUPPADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(outDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(ingredient), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(origin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<byte[], byte[]>> suppSelect(String suppId) {
        final Function function = new Function(FUNC_SUPPSELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(suppId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<byte[], byte[]>>(
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> retailInsert(String retailId, String retailName, String retailImg) {
        final Function function = new Function(
                FUNC_RETAILINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailImg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void retailInsert(String retailId, String retailName, String retailImg, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RETAILINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailImg)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String retailInsertSeq(String retailId, String retailName, String retailImg) {
        final Function function = new Function(
                FUNC_RETAILINSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailImg)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> foodDel(String foodNum) {
        final Function function = new Function(
                FUNC_FOODDEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void foodDel(String foodNum, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_FOODDEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String foodDelSeq(String foodNum) {
        final Function function = new Function(
                FUNC_FOODDEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> retailAdd(String foodNum, String retailId) {
        final Function function = new Function(
                FUNC_RETAILADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void retailAdd(String foodNum, String retailId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RETAILADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String retailAddSeq(String foodNum, String retailId) {
        final Function function = new Function(
                FUNC_RETAILADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(retailId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transAdd(String foodNum, String transId, String temp) {
        final Function function = new Function(
                FUNC_TRANSADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(temp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transAdd(String foodNum, String transId, String temp, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(temp)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transAddSeq(String foodNum, String transId, String temp) {
        final Function function = new Function(
                FUNC_TRANSADD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(foodNum), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(temp)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public List<FoodInsertEventEventResponse> getFoodInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FOODINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<FoodInsertEventEventResponse> responses = new ArrayList<FoodInsertEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FoodInsertEventEventResponse typedResponse = new FoodInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.food = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FoodInsertEventEventResponse> foodInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, FoodInsertEventEventResponse>() {
            @Override
            public FoodInsertEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(FOODINSERTEVENT_EVENT, log);
                FoodInsertEventEventResponse typedResponse = new FoodInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.food = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FoodInsertEventEventResponse> foodInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FOODINSERTEVENT_EVENT));
        return foodInsertEventEventFlowable(filter);
    }

    public List<SuppInsertEventEventResponse> getSuppInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SUPPINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<SuppInsertEventEventResponse> responses = new ArrayList<SuppInsertEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SuppInsertEventEventResponse typedResponse = new SuppInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.supp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuppInsertEventEventResponse> suppInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, SuppInsertEventEventResponse>() {
            @Override
            public SuppInsertEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SUPPINSERTEVENT_EVENT, log);
                SuppInsertEventEventResponse typedResponse = new SuppInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.supp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuppInsertEventEventResponse> suppInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPPINSERTEVENT_EVENT));
        return suppInsertEventEventFlowable(filter);
    }

    public List<TransInsertEventEventResponse> getTransInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<TransInsertEventEventResponse> responses = new ArrayList<TransInsertEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransInsertEventEventResponse typedResponse = new TransInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.trans = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransInsertEventEventResponse> transInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, TransInsertEventEventResponse>() {
            @Override
            public TransInsertEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSINSERTEVENT_EVENT, log);
                TransInsertEventEventResponse typedResponse = new TransInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.trans = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransInsertEventEventResponse> transInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSINSERTEVENT_EVENT));
        return transInsertEventEventFlowable(filter);
    }

    public List<RetailInsertEventEventResponse> getRetailInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RETAILINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<RetailInsertEventEventResponse> responses = new ArrayList<RetailInsertEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RetailInsertEventEventResponse typedResponse = new RetailInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.retail = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RetailInsertEventEventResponse> retailInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, RetailInsertEventEventResponse>() {
            @Override
            public RetailInsertEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RETAILINSERTEVENT_EVENT, log);
                RetailInsertEventEventResponse typedResponse = new RetailInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.retail = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RetailInsertEventEventResponse> retailInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETAILINSERTEVENT_EVENT));
        return retailInsertEventEventFlowable(filter);
    }

    public List<ThreePartyInsertEventEventResponse> getThreePartyInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(THREEPARTYINSERTEVENT_EVENT, transactionReceipt);
        ArrayList<ThreePartyInsertEventEventResponse> responses = new ArrayList<ThreePartyInsertEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ThreePartyInsertEventEventResponse typedResponse = new ThreePartyInsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.threeParty = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ThreePartyInsertEventEventResponse> threePartyInsertEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, ThreePartyInsertEventEventResponse>() {
            @Override
            public ThreePartyInsertEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(THREEPARTYINSERTEVENT_EVENT, log);
                ThreePartyInsertEventEventResponse typedResponse = new ThreePartyInsertEventEventResponse();
                typedResponse.log = log;
                typedResponse.threeParty = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ThreePartyInsertEventEventResponse> threePartyInsertEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(THREEPARTYINSERTEVENT_EVENT));
        return threePartyInsertEventEventFlowable(filter);
    }

    public List<InfoDeleteEventEventResponse> getInfoDeleteEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INFODELETEEVENT_EVENT, transactionReceipt);
        ArrayList<InfoDeleteEventEventResponse> responses = new ArrayList<InfoDeleteEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InfoDeleteEventEventResponse typedResponse = new InfoDeleteEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.foodNum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InfoDeleteEventEventResponse> infoDeleteEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, InfoDeleteEventEventResponse>() {
            @Override
            public InfoDeleteEventEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(INFODELETEEVENT_EVENT, log);
                InfoDeleteEventEventResponse typedResponse = new InfoDeleteEventEventResponse();
                typedResponse.log = log;
                typedResponse.foodNum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InfoDeleteEventEventResponse> infoDeleteEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INFODELETEEVENT_EVENT));
        return infoDeleteEventEventFlowable(filter);
    }

    @Deprecated
    public static InfoTable load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new InfoTable(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static InfoTable load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new InfoTable(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static InfoTable load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new InfoTable(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static InfoTable load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new InfoTable(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<InfoTable> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InfoTable.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<InfoTable> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InfoTable.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InfoTable> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InfoTable.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InfoTable> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InfoTable.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class FoodInsertEventEventResponse {
        public Log log;

        public BigInteger food;
    }

    public static class SuppInsertEventEventResponse {
        public Log log;

        public BigInteger supp;
    }

    public static class TransInsertEventEventResponse {
        public Log log;

        public BigInteger trans;
    }

    public static class RetailInsertEventEventResponse {
        public Log log;

        public BigInteger retail;
    }

    public static class ThreePartyInsertEventEventResponse {
        public Log log;

        public BigInteger threeParty;
    }

    public static class InfoDeleteEventEventResponse {
        public Log log;

        public BigInteger foodNum;
    }
}
